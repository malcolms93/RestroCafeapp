{"ast":null,"code":"import API from \"../../API\";\nimport { addCartAction, increaseCartAction, decreaseCartAction, fetchCartAction } from \"./actions\";\nconst api = new API();\nconst CARTS_KEY = \"CARTS_KEY\";\nexport const fetchFromLocalStorage = () => {\n  return async dispatch => {\n    let cartsJSON = localStorage.getItem(CARTS_KEY);\n    let carts = {};\n\n    if (cartsJSON) {\n      carts = JSON.parse(cartsJSON);\n    }\n\n    const subtotal = calculateSubtotal(carts);\n    dispatch(fetchCartAction(carts, subtotal));\n  };\n};\nexport const addCart = item => {\n  return async (dispatch, getState) => {\n    let prevCarts = getState().carts.list;\n    prevCarts[item.id] = {\n      item: item,\n      selected_count: 1\n    };\n    const subtotal = calculateSubtotal(prevCarts);\n    setToLocalStorage(prevCarts);\n    dispatch(addCartAction(prevCarts, subtotal));\n  };\n};\nexport const increaseCart = item => {\n  return async (dispatch, getState) => {\n    let prevCarts = getState().carts.list;\n    let nextSelectedCount = prevCarts[item.id].selected_count + 1;\n    prevCarts[item.id] = {\n      \"item\": item,\n      \"selected_count\": nextSelectedCount\n    };\n    const subtotal = calculateSubtotal(prevCarts);\n    setToLocalStorage(prevCarts);\n    dispatch(increaseCartAction(prevCarts, subtotal));\n  };\n};\nexport const decreaseCart = item => {\n  return async (dispatch, getState) => {\n    let prevCarts = getState().carts.list;\n    let nextSelectedCount = prevCarts[item.id].selected_count - 1;\n\n    if (nextSelectedCount > 0) {\n      prevCarts[item.id] = {\n        \"item\": item,\n        \"selected_count\": nextSelectedCount\n      };\n    } else {\n      delete prevCarts[item.id];\n    }\n\n    const subtotal = calculateSubtotal(prevCarts);\n    setToLocalStorage(prevCarts);\n    dispatch(decreaseCartAction(prevCarts, subtotal));\n  };\n};\n\nconst setToLocalStorage = carts => {\n  localStorage.setItem(CARTS_KEY, JSON.stringify(carts));\n};\n\nconst calculateSubtotal = carts => {\n  let subtotal = 0;\n  console.log(carts);\n\n  for (let key in carts) {\n    subtotal += Number(carts[key].item.price) * carts[key].selected_count;\n  }\n\n  return subtotal;\n};","map":{"version":3,"sources":["C:/Users/habta/OneDrive/Desktop/restrocafe/frontend/src/reducks/carts/operations.js"],"names":["API","addCartAction","increaseCartAction","decreaseCartAction","fetchCartAction","api","CARTS_KEY","fetchFromLocalStorage","dispatch","cartsJSON","localStorage","getItem","carts","JSON","parse","subtotal","calculateSubtotal","addCart","item","getState","prevCarts","list","id","selected_count","setToLocalStorage","increaseCart","nextSelectedCount","decreaseCart","setItem","stringify","console","log","key","Number","price"],"mappings":"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","sourcesContent":["import API from \"../../API\"\nimport {addCartAction, increaseCartAction, decreaseCartAction, fetchCartAction} from \"./actions\";\n\nconst api = new API();\nconst CARTS_KEY = \"CARTS_KEY\";\n\nexport const fetchFromLocalStorage = () => {\n    return async (dispatch) => {\n        let cartsJSON = localStorage.getItem(CARTS_KEY);\n        let carts = {};\n        if (cartsJSON) {\n            carts = JSON.parse(cartsJSON);\n        }\n        const subtotal = calculateSubtotal(carts);\n        dispatch(fetchCartAction(carts, subtotal));\n    }\n}\n\nexport const addCart = (item) => {\n    return async (dispatch, getState) => {\n        let prevCarts = getState().carts.list\n        prevCarts[item.id] = {item: item, selected_count: 1};\n        const subtotal = calculateSubtotal(prevCarts);\n        setToLocalStorage(prevCarts);\n        dispatch(addCartAction(prevCarts, subtotal));\n   }\n}\nexport const increaseCart = (item) => {\n    return async (dispatch, getState) => {\n        let prevCarts = getState().carts.list\n        let nextSelectedCount = prevCarts[item.id].selected_count + 1;\n        prevCarts[item.id] = {\"item\": item, \"selected_count\": nextSelectedCount};\n        const subtotal = calculateSubtotal(prevCarts);\n        setToLocalStorage(prevCarts);\n        dispatch(increaseCartAction(prevCarts, subtotal))\n   }\n}\n\nexport const decreaseCart = (item) => {\n    return async (dispatch, getState) => {\n        let prevCarts = getState().carts.list\n        let nextSelectedCount = prevCarts[item.id].selected_count - 1;\n        if (nextSelectedCount > 0) {\n            prevCarts[item.id] = {\"item\": item, \"selected_count\": nextSelectedCount};\n        } else {\n            delete prevCarts[item.id];\n        }\n        const subtotal = calculateSubtotal(prevCarts);\n        setToLocalStorage(prevCarts);\n        dispatch(decreaseCartAction(prevCarts, subtotal))\n   }\n}\n\nconst setToLocalStorage = (carts) => {\n    localStorage.setItem(CARTS_KEY, JSON.stringify(carts));\n}\n\nconst calculateSubtotal = (carts) => {\n    let subtotal = 0;\n    console.log(carts);\n    for (let key in carts) {\n        subtotal += (Number(carts[key].item.price) * carts[key].selected_count);\n    }\n   return subtotal;\n}"]},"metadata":{},"sourceType":"module"}